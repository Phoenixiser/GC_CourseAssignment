class(cls_list)
as.character(cls_list)
sapply(flags, class)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <-  flag_colors <- flags[, 11:17]
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors,sum)
sapply(flag_colors,sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
shape_mat <- apply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags, unique)
unique_vals
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
download.file(https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv")
?download.file
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv", tmp)
getdata.Fdata.Fss06hid <- read.csv("C:\\Users\\jzh62110\\AppData\\Local\\Temp\\RtmpWca2CM\\data22fc65395032")
View(getdata.Fdata.Fss06hid)
getdata.Fdata.Fss06hid$val[getdata.Fdata.Fss06hid$val == 24]
getdata.Fdata.Fss06hid$VAL[getdata.Fdata.Fss06hid$VAL == 24]
str(getdata.Fdata.Fss06hid$VAL)
str(getdata.Fdata.Fss06hid)
getdata.Fdata.Fss06hid$VAL[getdata.Fdata.Fss06hid$VAL == 24 & !is.na(getdata.Fdata.Fss06hid$VAL)]
length(getdata.Fdata.Fss06hid$VAL[getdata.Fdata.Fss06hid$VAL == 24 & !is.na(getdata.Fdata.Fss06hid$VAL)])
install.packages("xlsx")
install.packages("xlsx")
install.packages("xlsx2")
?xlsx
??xlsx
res <- read.xlsx("C:\Users\jzh62110\Downloads\getdata_data_DATA.gov_NGAP.xlsx", 1)
res <- read.xlsx("C://Users//jzh62110//Downloads//getdata_data_DATA.gov_NGAP.xlsx", 1)
import("xlsx")
library("xlsx")
install.packages("rJava")
library("xlsx")
res <- read.xlsx("C://Users//jzh62110//Downloads//getdata_data_DATA.gov_NGAP.xlsx", 1)
library("xlsx")
library("rJava")
res <- read.xlsx("C://Users//jzh62110//Downloads//getdata_data_DATA.gov_NGAP.xlsx", 1)
library("xlsx")
Sys.getenv("R_ARCH")
install.packages("rJava")
install.packages("xlsx")
install.packages("rJava")
library("xlsx")
library("rJava")
res <- read.xlsx("C://Users//jzh62110//Downloads//getdata_data_DATA.gov_NGAP.xlsx", 1)
library("xlsx")
library("rJava")
install.packages("rJava")
install.packages("xlsx")
install.packages("xlsx")
library("xlsx")
res <- read.xlsx("C://Users//jzh62110//Downloads//getdata_data_DATA.gov_NGAP.xlsx", 1)
View(res)
View(res)
dat <- res[18:23,7-15]
View(dat)
View(dat)
names(dat)
class(dat)
res[17,]
names(dat) <- res[17,]
colnames(dat) <- res[17,]
colnames(dat)
res[17,]
res[17,7:15]
colnames(dat) <- res[17,7:15]
dat
View(dat)
View(dat)
View(dat)
res[17,7:15]
res[18:23,7-15]
dat <- res[18:23,7-15]
dat
view(dat)
View(dat)
res[18:23,7:15]
dat <-res[18:23,7:15]
View(dat)
res[17,7:15]
colnames(dat) <- res[17,7:15]
View(dat)
res[17,7:15]
?colnames
res[17,7:15]
names(dat)
colnames(dat) <- res[17,7:15]
names(dat)
class(res[17,7:15])
?as.vector
as.vector(res[17,7:15])
colnames(dat) <- as.vector(res[17,7:15])
View(dat)
as.vector(res[17,7:15])
res[17,7:15]
res[17,7:15][1]
res[17,7:15][1,]
class(res[17,7:15][1,])
class(as.vector(res[17,7:15]))
x <- as.vector(res[17,7:15])
x
x[1,]
class(x)
x <- as.vector(res[17,7:15], mode="vector")
x <- as.vector(res[17,7:15], mode="any")
x
x <- as.vector(res[17,7:15], mode="logical")
x
x <- as.vector(res[17,7:15], mode="character")
x
x <- as.vector(res[17,7:15], mode="raw")
x
x <- as.vector(res[17,7:15], mode="complex")
x
x <- as.vector(res[17,7:15], mode="character")
x
as.character(res[17,7:15])
res[17,7:15]
res[17,7]
res[17,8]
lapply(res[17,8], as.character)
sapply(res[17,8], as.character)
sapply(res[17,7:8], as.character)
sapply(res[17,7:15], as.character)
sapply(res[17,7:15], as.character)
as.character(res[17,7:15])
sapply(res[17,7:15], as.character)
colnames(dat) <- sapply(res[17,7:15], as.character)
View(dat)
sum(dat$Zip*dat$Ext,na.rm=T)
lapply(dat, as.numeric)
x <- lapply(dat, as.numeric)
View(x)
sapply(res[17,7:15], as.character)
sapply(res[18:23,7:15], as.character)
data.frame(res[18:23,7:15], stringsAsFactors=F)
dat <- data.frame(res[18:23,7:15], stringsAsFactors=F)
dat
sapply(res[17,7:15], as.character)
colnames(dat) <- sapply(res[17,7:15], as.character)
dat
sum(dat$Zip*dat$Ext,na.rm=T)
str(dat)
?data.frame
default.stringsAsFactors()
dat <- data.frame(res[18:23,7:15], stringsAsFactors=T)
dat
str(dat)
dat <- data.frame(res[18:23,7:15], stringsAsFactors=FALSE)
dat
str(dat)
View(dat)
colnames(dat) <- sapply(res[17,7:15], as.character)
View(dat)
dat$Zip <- as.numeric(dat$Zip)
View(dat)
str(dat)
sum(dat$Zip*dat$Ext,na.rm=T)
dat$Ext <- as.numeric(dat$Ext)
str(dat)
sum(dat$Zip*dat$Ext,na.rm=T)
dat$Zip*dat$Ext
dat$Zip
dat$Ext
View(dat)
View(dat)
res[17,7:15]
res[18:23,7:15]
?read.xlsx
res <- read.xlsx("C://Users//jzh62110//Downloads//getdata_data_DATA.gov_NGAP.xlsx", 1, stringsAsFactors=FALSE)
str(res)
res[18:23,7:15]
dat <- res[18:23,7:15]
View(dat)
res[17,7:15]
colnames(dat) <- sapply(res[17,7:15], as.character)
View(dat)
colnames(dat) <- res[17,7:15]
View(dat)
sum(dat$Zip*dat$Ext,na.rm=T)
dat$Zip <- as.numeric(dat$Zip)
View(dat)
dat$Ext <- as.numeric(dat$Ext)
View(dat)
sum(dat$Zip*dat$Ext,na.rm=T)
install.packages("xml")
install.packages("XML")
??XML
dat <- res[18:23,7:15]
colnames(dat) <- res[17,7:15]
dat$Zip <- as.numeric(dat$Zip)
dat$Ext <- as.numeric(dat$Ext)
sum(dat$Zip*dat$Ext,na.rm=T)
library(xlsx)
library(xlsx)
getdata.Fdata.Fss06hid <- read.csv("C:\\Users\\jzh62110\\AppData\\Local\\Temp\\RtmpWca2CM\\data22fc65395032")
getdata_data_ss06hid <- read.csv("C:/Users/jzh62110/Downloads/getdata_data_ss06hid.csv", stringsAsFactors=FALSE)
View(getdata_data_ss06hid)
getdata_data_ss06hid <- read.csv("C:/Users/jzh62110/Downloads/getdata_data_ss06hid.csv",
stringsAsFactors=FALSE)
getdata.Fdata.Fss06hid$VAL
[getdata.Fdata.Fss06hid$VAL == 24 & !is.na(getdata.Fdata.Fss06hid$VAL)]
getdata_data_ss06hid <- read.csv("C:/Users/jzh62110/Downloads/getdata_data_ss06hid.csv",
stringsAsFactors=FALSE)
getdata_data_ss06hid <- read.csv("C:/Users/jzh62110/Downloads/getdata_data_ss06hid.csv",
stringsAsFactors=FALSE)
getdata.Fdata.Fss06hid$VAL[getdata.Fdata.Fss06hid$VAL == 24 & !is.na(getdata.Fdata.Fss06hid$VAL)]
getdata_data_ss06hid <- read.csv("C:/Users/jzh62110/Downloads/getdata_data_ss06hid.csv",
stringsAsFactors=FALSE)
getdata_data_ss06hid$VAL[getdata_data_ss06hid$VAL == 24 & !is.na(getdata.Fdata.Fss06hid$VAL)]
getdata_data_ss06hid <- read.csv("C:/Users/jzh62110/Downloads/getdata_data_ss06hid.csv",
stringsAsFactors=FALSE)
getdata_data_ss06hid$VAL
getdata_data_ss06hid <- read.csv("C:/Users/jzh62110/Downloads/getdata_data_ss06hid.csv",
stringsAsFactors=FALSE)
getdata_data_ss06hid$VAL[getdata_data_ss06hid$VAL == 24 & !is.na(getdata_data_ss06hid$VAL)]
getdata_data_ss06hid <- read.csv("C:/Users/jzh62110/Downloads/getdata_data_ss06hid.csv",
stringsAsFactors=FALSE)
length(getdata_data_ss06hid$VAL[getdata_data_ss06hid$VAL == 24 & !is.na(getdata_data_ss06hid$VAL)])
library(XML)
library(XML)
doc <-xmlTreeParse("C:\Users\jzh62110\Downloads\getdata_data_restaurants.xml", useInternal=TRUE)
library(XML)
doc <-xmlTreeParse("C://Users//jzh62110//Downloads//getdata_data_restaurants.xml", useInternal=TRUE)
rootNode <- xmlRoot(doc)
xmlName(rootNode)
xpathSApply(rootNode. "//zipcode", xmlValue)
xpathSApply(rootNode, "//zipcode", xmlValue)
xpathSApply(rootNode, "//zipcode==21224", xmlValue)
xpathSApply(rootNode, "//zipcode[@class=21224]", xmlValue)
?xpathSApply
xpathApply(rootNode, "//zipcode[@class=21224]", xmlValue)
xpathApply(rootNode, "//zipcode[=21224]", xmlValue)
xpathApply(rootNode, "//zipcode[@=21224]", xmlValue)
xpathApply(rootNode, "//zipcode", xmlValue)
xpathSApply(rootNode, "//zipcode", xmlValue)
zipcodes==21231
zipcodes <- xpathSApply(rootNode, "//zipcode", xmlValue)
zipcodes==21231
zipcodes[zipcodes==21231]
length(zipcodes[zipcodes==21231])
library(XML)
doc <-xmlTreeParse("C://Users//jzh62110//Downloads//getdata_data_restaurants.xml", useInternal=TRUE)
rootNode <- xmlRoot(doc)
xmlName(rootNode)
zipcodes <- xpathSApply(rootNode, "//zipcode", xmlValue)
length(zipcodes[zipcodes==21231])
?fread()
?fread
install.packages("data.table")
library( data.table)
getdata_data_ss06hid_fread <- fread("C:/Users/jzh62110/Downloads/getdata_data_ss06hid.csv",
stringsAsFactors=FALSE)
View(getdata_data_ss06hid_fread)
View(getdata_data_ss06hid_fread)
DT <- fread("C:/Users/jzh62110/Downloads/getdata_data_ss06hid.csv",
stringsAsFactors=FALSE)
View(DT)
View(DT)
DT[,mean(pwgtp15),by=SEX]
View(DT)
View(DT)
DT[,mean(pwgtp15),by=SEX]
source("http://www.bioconductor.org/biocLite.R")
ls()
ls()
class(biocLite)
biocLite("limma")
biocLite("limma")
library(limma)
hsb2 <- read.csv("http://www.ats.ucla.edu/stat/data/hsb2.csv")
attach(hsb2)
hw <- (write >= 60)
hm <- (math >= 60)
hr <- (read >= 60)
c3 <- cbind(hw, hm, hr)
a <- vennCounts(c3)
a
a
vennDiagram(a)
biocLite("rBiopaxParser")
browseVignettes("rBiopaxParser")
??rBiopaxParser
install.packages("RMySQL")
install.packages("RMySQL")
install.packages("ROracle")
install.packages("RODBC")
library(RODBC)
install.packages("RODBC")
install.packages("RODBC")
library(RODBC)
install.packages("ROracle")
install.packages("RMySQL")
install.packages("RJDBC")
myconn <-odbcConnect("mydsn", uid="Rob", pwd="aardvark")
myconn <-odbcConnect("TEST_BioCycMetabolome", uid="mdbadmin", pwd="mdb@admin2013'")
myconn <-odbcConnect("TEST_BioCycMetabolome", uid="mdbadmin", pwd="mdb@admin2013")
source("http://bioconductor.org/biocLite.R")
biocLite("HIVcDNAvantWout03")
??HIVcDNAvantWout03
HIVcDNAvantWout03
ls
ls()
data(hiv1raw)
library(HIVcDNAvantWout03)
data(hiv1raw)
head(hiv1raw)
str(hiv1raw)
set.seed(1)
rpois(5, 2)
?rpois
?set.seed
?rpois
set.seed(1)
rpois(5, 2)
?rnorm
?rpois
?dpois
?rpois
?ppois
set.seed(10)
x <- rbinom(10, 10, 0.5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
y
?qpois
?rbinom
set.seed(10)
x <- rbinom(10, 10, 0.5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
?system.time()
?Rprof
?summaryRprof
ls()
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
datasets
library(datasets)
Rprof()
ls()
Rprof(NULL)
summaryRprof()
summaryRprof()
?xyplot
??xyplot
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
BodyWeight
?lines
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
p
print(p)
print(p)
library(datasets)
data(airquality)
str(airquality)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
library(ggplot2)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
str(airquality)
library(datasets)
data(airquality)
str(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(Wind, Ozone, data = airquality, geom = "smooth")
qplot(Wind, Ozone, data = airquality)
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies, panel = panel.loess)
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies) + geom_smooth()
# You should create one R script called run_analysis.R that does the following.
# 1 Merges the training and the test sets to create one data set.
# 2 Extracts only the measurements on the mean and standard deviation for each
# measurement.
# 3 Uses descriptive activity names to name the activities in the data set
# 4 Appropriately labels the data set with descriptive variable names.
# 5 From the data set in step 4, creates a second, independent tidy data set with
# the average of each variable for each activity and each subject.
featureList = read.csv("./data/UCI HAR Dataset 2//features.txt",
sep=" ",
header=FALSE,
stringsAsFactors=FALSE,
col.names = c("feature.code", "feature"))
activityCode = read.csv("./data/UCI HAR Dataset 2//activity_labels.txt",
sep=" ",
header=FALSE,
stringsAsFactors=FALSE,
col.names = c("activity.code", "activity"))
featureLength <- length(featureList$feature)
setwd("~/GitHub/GC_CourseAssignment")
# You should create one R script called run_analysis.R that does the following.
# 1 Merges the training and the test sets to create one data set.
# 2 Extracts only the measurements on the mean and standard deviation for each
# measurement.
# 3 Uses descriptive activity names to name the activities in the data set
# 4 Appropriately labels the data set with descriptive variable names.
# 5 From the data set in step 4, creates a second, independent tidy data set with
# the average of each variable for each activity and each subject.
featureList = read.csv("./data/UCI HAR Dataset 2//features.txt",
sep=" ",
header=FALSE,
stringsAsFactors=FALSE,
col.names = c("feature.code", "feature"))
activityCode = read.csv("./data/UCI HAR Dataset 2//activity_labels.txt",
sep=" ",
header=FALSE,
stringsAsFactors=FALSE,
col.names = c("activity.code", "activity"))
featureLength <- length(featureList$feature)
train_x = read.fwf("./data/UCI HAR Dataset 2/train/X_train.txt",
widths=c(16),
nrows=10,
colClasses=c("numeric"),
col.names=featureList$features,
header=FALSE)
## Train
train_x = read.fwf("./data/UCI HAR Dataset 2/train/X_train.txt",
widths=c(16),
nrows=10,
colClasses=c("numeric"),
#col.names=featureList$features,
header=FALSE)
## Train
train_x = read.fwf("./data/UCI HAR Dataset 2/train/X_train.txt",
widths=c(16),
nrows=10,
colClasses=c("numeric"),
#col.names=featureList$features,
header=FALSE)
## Train
train_x = read.fwf("./data/UCI HAR Dataset 2/train/X_train.txt",
widths=rep(16, 10),
nrows=10,
colClasses=rep("numeric", 10),
#col.names=featureList$features,
header=FALSE)
## Train
train_x = read.fwf("./data/UCI HAR Dataset 2/train/X_train.txt",
widths=rep(16, 100),
nrows=100,
colClasses=rep("numeric", 100),
#col.names=featureList$features,
header=FALSE)
## Train
train_x = read.fwf("./data/UCI HAR Dataset 2/train/X_train.txt",
widths=rep(16, 100),
#nrows=100,
colClasses=rep("numeric", 100),
#col.names=featureList$features,
header=FALSE)
train_x = read.fwf("./data/UCI HAR Dataset 2/train/X_train.txt",
widths=rep(16, 100),
colClasses=rep("numeric", 100),
col.names=featureList$features,
header=FALSE)
# You should create one R script called run_analysis.R that does the following.
# 1 Merges the training and the test sets to create one data set.
# 2 Extracts only the measurements on the mean and standard deviation for each
# measurement.
# 3 Uses descriptive activity names to name the activities in the data set
# 4 Appropriately labels the data set with descriptive variable names.
# 5 From the data set in step 4, creates a second, independent tidy data set with
# the average of each variable for each activity and each subject.
featureList = read.csv("./data/UCI HAR Dataset 2//features.txt",
sep=" ",
header=FALSE,
stringsAsFactors=FALSE,
col.names = c("feature.code", "feature"))
activityCode = read.csv("./data/UCI HAR Dataset 2//activity_labels.txt",
sep=" ",
header=FALSE,
stringsAsFactors=FALSE,
col.names = c("activity.code", "activity"))
featureLength <- length(featureList$feature)
train_x = read.fwf("./data/UCI HAR Dataset 2/train/X_train.txt",
widths=rep(16, featureLength),
colClasses=rep("numeric", featureLength),
col.names=featureList$features,
buffersize = 2000,
header=FALSE)
